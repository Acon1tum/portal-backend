generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

enum Sex {
  MALE
  FEMALE
}

enum Status {
  ACTIVE
  INACTIVE
}

enum VerificationStatus {
  VERIFIED
  UNVERIFIED
  PENDING
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
  PENDING
}

enum NotificationType {
  SYSTEM
  MESSAGE
  ACCOUNT
  BUSINESS
}

enum NotificationStatus {
  UNREAD
  READ
}

enum WeekDay {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum UserRole {
  VISITOR
  JOBSEEKER
  MANNING_AGENCY
  SUPERADMIN
  EXHIBITOR
  SPONSOR
}

enum UserType {
  SEAFARER
  CORPORATE_PROFESSIONAL
  STUDENTS
  OTHERS
  SUPERADMIN
}

enum CurrentJobStatus {
  ACTIVELY_LOOKING
  OPEN_TO_OFFERS
  NOT_LOOKING
}

enum PostType {
  JOB_LISTING
  ANNOUNCEMENT
  NEWS
  EVENT
  PROMOTION
  GENERAL
}

// ============================================================================
// CORE MODELS
// ============================================================================

model User {
  id               String           @id @default(uuid()) @db.Uuid
  email            String           @unique
  name             String?
  sex              Sex
  role             UserRole         @default(VISITOR)
  userType         UserType?
  currentJobStatus CurrentJobStatus?
  isEmailVerified  Boolean          @default(false)
  
  // Relationships
  accounts         Account[]
  organization     Organization?    @relation("UserOrganization") // One-to-one
  organizations    Organization[]   @relation("UserOrganizations") // Many-to-many
  receivedMessages Message[]        @relation("UserMessages")
  sentMessages     Message[]        @relation("SenderMessages")
  notifications    Notification[]
  createdPostings  Posting[]
  comments         Comment[]
  favorites        PostingFavorite[]
}

model Account {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                 String    @unique
  password              String
  userId                String    @db.Uuid
  status                Status    @default(ACTIVE)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relationships
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ============================================================================
// ORGANIZATION MODELS
// ============================================================================

model Organization {
  id                 String             @id @default(uuid()) @db.Uuid
  name               String
  domain             String?            @unique
  logo               String?
  industry           String?
  description        String?
  location           String?
  phoneNumber        String?
  email              String?
  websiteUrl         String?
  verificationStatus VerificationStatus @default(UNVERIFIED)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  userId             String?            @unique @db.Uuid
  
  // Relationships
  user               User?              @relation("UserOrganization", fields: [userId], references: [id]) // One-to-one
  users              User[]             @relation("UserOrganizations") // Many-to-many
  taglineCategories  TaglineCategory[]  @relation("OrganizationTaglineCategories") // Many-to-many
  businessHours      BusinessHour[]
  keyStrengths       KeyStrength[]
  team               TeamMember[]
  reviews            Review[]
  documents          OrganizationDocument[]
  postings           Posting[]
}

model TaglineCategory {
  id            String         @id @default(uuid()) @db.Uuid
  name          String         @unique
  organizations Organization[] @relation("OrganizationTaglineCategories") // Many-to-many
}

model BusinessHour {
  id             String       @id @default(uuid()) @db.Uuid
  dayOfWeek      WeekDay
  openTime       String
  closeTime      String
  isClosed       Boolean      @default(false)
  organizationId String       @db.Uuid
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model KeyStrength {
  id             String       @id @default(uuid()) @db.Uuid
  title          String
  description    String
  organizationId String       @db.Uuid
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model TeamMember {
  id             String       @id @default(uuid()) @db.Uuid
  name           String
  title          String
  description    String
  socialLinks    Json
  organizationId String       @db.Uuid
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Review {
  id             String       @id @default(uuid()) @db.Uuid
  rating         Int
  description    String
  likes          Int          @default(0)
  responses      Json?
  writtenBy      String
  createdAt      DateTime     @default(now())
  organizationId String       @db.Uuid
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model OrganizationDocument {
  id             String       @id @default(uuid()) @db.Uuid
  url            String
  fileName       String
  fileType       String?
  size           Int?
  description    String?
  uploadedAt     DateTime     @default(now())
  organizationId String       @db.Uuid
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

// ============================================================================
// POSTING MODELS
// ============================================================================

model Posting {
  id             String       @id @default(uuid()) @db.Uuid
  title          String
  content        String
  postType       PostType
  isPublished    Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String       @db.Uuid
  createdById    String       @db.Uuid
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy      User         @relation(fields: [createdById], references: [id], onDelete: Restrict)
  attachments    PostingAttachment[]
  comments       Comment[]
  favorites      PostingFavorite[]
}

model PostingAttachment {
  id         String   @id @default(uuid()) @db.Uuid
  url        String   // This will store base64 data or cloud storage URLs
  fileName   String?
  fileType   String?
  size       Int?
  uploadedAt DateTime @default(now())
  postingId  String   @db.Uuid
  
  // Relationships
  posting    Posting  @relation(fields: [postingId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postingId String   @db.Uuid
  userId    String   @db.Uuid
  
  // Relationships
  posting   Posting  @relation(fields: [postingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostingFavorite {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  postingId String   @db.Uuid
  userId    String   @db.Uuid
  
  // Relationships
  posting   Posting  @relation(fields: [postingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postingId, userId]) // Ensures a user can only favorite a post once
}

// ============================================================================
// MESSAGE MODELS
// ============================================================================

model Message {
  id             String              @id @default(uuid()) @db.Uuid
  content        String
  status         MessageStatus       @default(PENDING)
  hasAttachments Boolean             @default(false)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  userId         String              @db.Uuid
  senderId       String              @db.Uuid
  
  // Relationships
  user           User                @relation("UserMessages", fields: [userId], references: [id], onDelete: Cascade)
  sender         User                @relation("SenderMessages", fields: [senderId], references: [id], onDelete: Cascade)
  attachments    MessageAttachment[]
}

model MessageAttachment {
  id         String   @id @default(uuid()) @db.Uuid
  url        String
  fileName   String?
  fileType   String?
  size       Int?
  uploadedAt DateTime @default(now())
  messageId  String   @db.Uuid
  
  // Relationships
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String             @id @default(uuid()) @db.Uuid
  content   String
  type      NotificationType   @default(SYSTEM)
  status    NotificationStatus @default(UNREAD)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  userId    String             @db.Uuid
  
  // Relationships
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}